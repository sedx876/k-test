{"ast":null,"code":"var _jsxFileName = \"/Users/sharonwatkins/Desktop/Code/kline/client/src/components/StripeCheckout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createPaymentIntent } from \"../functions/stripe\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"antd\";\nimport { DollarOutlined, CheckOutlined, SwapOutlined } from \"@ant-design/icons\";\nimport Laptop from \"../images/laptop.png\";\nimport { createOrder, emptyUserCart } from \"../functions/user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst StripeCheckout = _ref => {\n  _s();\n\n  let {\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    user,\n    coupon\n  } = useSelector(state => ({ ...state\n  }));\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [cartTotal, setCartTotal] = useState(0);\n  const [totalAfterDiscount, setTotalAfterDiscount] = useState(0);\n  const [payable, setPayable] = useState(0);\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    createPaymentIntent(user.token, coupon).then(res => {\n      console.log(\"create payment intent\", res.data);\n      setClientSecret(res.data.clientSecret); // additional response received on successful payment\n\n      setCartTotal(res.data.cartTotal);\n      setTotalAfterDiscount(res.data.totalAfterDiscount);\n      setPayable(res.data.payable);\n    });\n  }, []);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: e.target.name.value\n        }\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      // here you get result after successful payment\n      // create order and save in database for admin to process\n      createOrder(payload, user.token).then(res => {\n        if (res.data.ok) {\n          // empty cart from local storage\n          if (typeof window !== \"undefined\") localStorage.removeItem(\"cart\"); // empty cart from redux\n\n          dispatch({\n            type: \"ADD_TO_CART\",\n            payload: []\n          }); // reset coupon to false\n\n          dispatch({\n            type: \"COUPON_APPLIED\",\n            payload: false\n          }); // empty cart from database\n\n          emptyUserCart(user.token);\n        }\n      }); // empty user cart from redux store and local storage\n\n      console.log(JSON.stringify(payload, null, 4));\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  const handleChange = async e => {\n    // listen for changes in the card element\n    // and display any errors as the custoemr types their card details\n    setDisabled(e.empty); // disable pay button if errors\n\n    setError(e.error ? e.error.message : \"\"); // show error message\n  };\n\n  const cartStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!succeeded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: coupon && totalAfterDiscount !== undefined ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert alert-success\",\n        children: `Total after discount: $${totalAfterDiscount}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert alert-danger\",\n        children: \"No coupon applied\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center pb-5\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        cover: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Laptop,\n          style: {\n            height: \"200px\",\n            objectFit: \"cover\",\n            marginBottom: \"-50px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this),\n        actions: [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DollarOutlined, {\n            className: \"text-info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 56\n          }, this), \" Total: $\", cartTotal]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(CheckOutlined, {\n            className: \"text-info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 55\n          }, this), \" Total payable : $\", (payable / 100).toFixed(2)]\n        }, void 0, true)]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"payment-form\",\n      className: \"stripe-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {\n        id: \"card-element\",\n        options: cartStyle,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stripe-button\",\n        disabled: processing || disabled || succeeded,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"button-text\",\n          children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\",\n            id: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 27\n          }, this) : \"Pay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-error\",\n        role: \"alert\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: succeeded ? \"result-message\" : \"result-message hidden\",\n        children: [\"Payment Successful.\", \" \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/user/history\",\n          children: \"See it in your purchase history.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StripeCheckout, \"4wBMrnqFwWo0yWY1DV6TDb8RFwk=\", false, function () {\n  return [useDispatch, useSelector, useStripe, useElements];\n});\n\n_c = StripeCheckout;\nexport default StripeCheckout;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"sources":["/Users/sharonwatkins/Desktop/Code/kline/client/src/components/StripeCheckout.js"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","useSelector","useDispatch","createPaymentIntent","Link","Card","DollarOutlined","CheckOutlined","SwapOutlined","Laptop","createOrder","emptyUserCart","StripeCheckout","history","dispatch","user","coupon","state","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","cartTotal","setCartTotal","totalAfterDiscount","setTotalAfterDiscount","payable","setPayable","stripe","elements","token","then","res","console","log","data","handleSubmit","e","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","billing_details","name","target","value","message","ok","window","localStorage","removeItem","type","JSON","stringify","handleChange","empty","cartStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","undefined","height","objectFit","marginBottom","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createPaymentIntent } from \"../functions/stripe\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"antd\";\nimport { DollarOutlined, CheckOutlined, SwapOutlined } from \"@ant-design/icons\";\nimport Laptop from \"../images/laptop.png\";\nimport { createOrder, emptyUserCart } from \"../functions/user\";\n\nconst StripeCheckout = ({ history }) => {\n  const dispatch = useDispatch();\n  const { user, coupon } = useSelector((state) => ({ ...state }));\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  const [cartTotal, setCartTotal] = useState(0);\n  const [totalAfterDiscount, setTotalAfterDiscount] = useState(0);\n  const [payable, setPayable] = useState(0);\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    createPaymentIntent(user.token, coupon).then((res) => {\n      console.log(\"create payment intent\", res.data);\n      setClientSecret(res.data.clientSecret);\n      // additional response received on successful payment\n      setCartTotal(res.data.cartTotal);\n      setTotalAfterDiscount(res.data.totalAfterDiscount);\n      setPayable(res.data.payable);\n    });\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setProcessing(true);\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: e.target.name.value,\n        },\n      },\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      // here you get result after successful payment\n      // create order and save in database for admin to process\n      createOrder(payload, user.token).then((res) => {\n        if (res.data.ok) {\n          // empty cart from local storage\n          if (typeof window !== \"undefined\") localStorage.removeItem(\"cart\");\n          // empty cart from redux\n          dispatch({\n            type: \"ADD_TO_CART\",\n            payload: [],\n          });\n          // reset coupon to false\n          dispatch({\n            type: \"COUPON_APPLIED\",\n            payload: false,\n          });\n          // empty cart from database\n          emptyUserCart(user.token);\n        }\n      });\n      // empty user cart from redux store and local storage\n      console.log(JSON.stringify(payload, null, 4));\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  const handleChange = async (e) => {\n    // listen for changes in the card element\n    // and display any errors as the custoemr types their card details\n    setDisabled(e.empty); // disable pay button if errors\n    setError(e.error ? e.error.message : \"\"); // show error message\n  };\n\n  const cartStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\",\n        },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    },\n  };\n\n  return (\n    <>\n      {!succeeded && (\n        <div>\n          {coupon && totalAfterDiscount !== undefined ? (\n            <p className=\"alert alert-success\">{`Total after discount: $${totalAfterDiscount}`}</p>\n          ) : (\n            <p className=\"alert alert-danger\">No coupon applied</p>\n          )}\n        </div>\n      )}\n      <div className=\"text-center pb-5\">\n        <Card\n          cover={\n            <img\n              src={Laptop}\n              style={{\n                height: \"200px\",\n                objectFit: \"cover\",\n                marginBottom: \"-50px\",\n              }}\n            />\n          }\n          actions={[\n            <>\n              <DollarOutlined className=\"text-info\" /> <br /> Total: $\n              {cartTotal}\n            </>,\n            <>\n              <CheckOutlined className=\"text-info\" /> <br /> Total payable : $\n              {(payable / 100).toFixed(2)}\n            </>,\n          ]}\n        />\n      </div>\n\n      <form id=\"payment-form\" className=\"stripe-form\" onSubmit={handleSubmit}>\n        <CardElement\n          id=\"card-element\"\n          options={cartStyle}\n          onChange={handleChange}\n        />\n        <button\n          className=\"stripe-button\"\n          disabled={processing || disabled || succeeded}\n        >\n          <span id=\"button-text\">\n            {processing ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay\"}\n          </span>\n        </button>\n        <br />\n        {error && (\n          <div className=\"card-error\" role=\"alert\">\n            {error}\n          </div>\n        )}\n        <br />\n        <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n          Payment Successful.{\" \"}\n          <Link to=\"/user/history\">See it in your purchase history.</Link>\n        </p>\n      </form>\n    </>\n  );\n};\n\nexport default StripeCheckout"]},"metadata":{},"sourceType":"module"}